spring:
  profiles:
    active: local
  config:
    import: "optional:configserver:http://config:8888"
  cloud:
    config:
      name: wallet-service
      profile: local
  application:
    name: wallet-service
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    open-in-view: false
    defer-datasource-initialization: true
  redis:
    host: 127.0.0.1
    port: 6379

  sql:
    init:
      mode: always
      platform: h2

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

server:
  port: 8082
  shutdown: graceful

eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

user:
  create:
    point: 100000
    message: "회원가입 포인트"

---
spring:
  config:
    activate:
      on-profile: main
    import: "optional:configserver:http://config:8888"
  cloud:
    config:
      name: wallet-service
      profile: main
  application:
    name: wallet-service
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql-container:3306/wallet?validationQuery="select 1"
    username: wallet
    password: wallet
  jpa:
    hibernate:
      ddl-auto: update
    generate-ddl: true
    database: mysql
    open-in-view: false
    defer-datasource-initialization: true
  sql:
    init:
      platform: mysql
      mode: embedded
  redis:
    host: redis-container
    port: 6379

  kafka:
    consumer:
      bootstrap-servers: kafka-1:9092
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: kafka-1:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

server:
  port: 8082
  shutdown: graceful

eureka:
  instance:
    instance-id: ${spring.cloud.client.hostname}:${spring.application.instance_id:${server.port}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka:8761/eureka

management:
  endpoints:
    web:
      exposure:
        include: refresh